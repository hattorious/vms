# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'

Vagrant.require_version '>= 2.1.4'

$generated_ignition_config_dir = File.join(File.dirname(__FILE__), 'ignition')
$ignition_config_path = File.join($generated_ignition_config_dir, 'config.ign')

$update_channel = 'stable'
$vm_memory = 512
$vb_cpuexecutioncap = 25

Vagrant.configure("2") do |config|
  config.ssh.insert_key = false
  config.ssh.forward_agent = true

  config.vm.box = "coreos-#{$update_channel}"
  config.vm.box_url = "https://#{$update_channel}.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json"

  config.vm.provider :virtualbox do |v|
    # We don't have guest additions or a functional vboxsf in CoreOS, so tell Vagrant that so it can be smarter
    v.check_guest_additions = false
    v.functional_vboxsf     = false

    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]            
    v.customize ["modifyvm", :id, "--cpuexecutioncap", "#{$vb_cpuexecutioncap}"]
    v.memory = $vm_memory

    # enable ignition (this is always done on virtualbox as this is how the ssh key is added to the system)
    config.vagrant.plugins = 'vagrant-ignition' 
    config.ignition.enabled = true
    config.ignition.config_obj = v

    # the ignition plugin creates an additional config vdisk that is attached to the VM for first-boot config
    config.ignition.drive_root = $generated_ignition_config_dir
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  # when the ignition config doesn't exist, the plugin automatically generates a very basic Ignition with the ssh key
  # and previously specified options (ip and hostname). Otherwise, it appends those to the provided config.ign below
  if File.exist?($ignition_config_path)
    config.ignition.path = $ignition_config_path
  end
end
